<?php

namespace Vendor\Services\Database;

use PDO;
use PDOStatement;
use Vendor\Services\Environment\Environment as Env;


/**
 * @author Peter Mwambi
 * @date Tue Jul 25 2023 11:49:01 GMT+0300 (East Africa Time)
 * @version miracle v1.2.0
 * @package Vendor\Services\Database
 * @abstract Database Service configuration. 
 * Contains get and set properties as well as methods
 */
abstract class DatabaseServiceConfiguration
{


    /**
     * ##### Database Connection Registrar
     * - This property stores a live connection to the database we are connecting to
     * @var object $conn
     */
    private object $conn;

    /**
     * #### Database Name Registrar
     * - This property stores the name of the database we are connecting to
     * @var string $conn
     */
    private string $dbname = "";

    /**
     * ##### Database Password Registrar
     * - This property stores the host password of the database we are connecting to
     * @var string $password;
     */
    private $password = "";

    /**
     * #### Database Sql Query Registrar
     * - This property stores the sql statement to be executed
     * @var string $sql
     */
    private $sql = "";

    /**
     * #### Database Params Registrar
     * - This property stores parameters to be bound by in sql prepared statement
     * @var array $params
     */
    private array $params = [];

    /**
     * #### Database fetch registrar
     * - This property stores fetch directives that control the output of results
     * - Fetch control directives are
     *  0 - Fetches a single output
     *  1 - Fetches a verbose output  
     * @var int $fetch  
     */
    private int $fetch = 0;

    /**
     * #### Database Statement Registrar
     * - This property registers a prepared sql statement and allows us to execute sql queries 
     * @var object $stmt
     */
    private object $stmt;

    /**
     * #### Database Rowcount Registrar
     * - This property stores the row count produced by an execution of a query that yeilds results
     * @var int $count
     */
    private int $count = 0;

    /**
     * #### Database Results Registrar
     * - This property stores the results generated by an execution of a query that yeilds results
     * @var array $results
     */
    private array|object|bool $results = array();

    /**
     * #### Database Columns Registrar
     * - This property stores the columns to be queried by an sql statement
     * @var array|string $columns
     */
    private string|array $columns = [];

    /**
     * #### Database Table Registrar
     * - This property stores the table to be queried in the database by an sql statement
     * @var string $table
     */
    private string $table;

    /**
     * #### Database Where Clause Registrar
     * - This property stores the where clause queried in an sql statement
     * @var array $where
     */
    private array $where = array();

    /**
     * #### Database Options Registrar
     * - This property stores PDO connection options
     * @var array $options
     */
    private array $options = [];

    /**
     * #### Database Query Data Registrar
     * - This property stores data to be queried by insert and update statements
     */
    private array $data = [];


    /**
     * #### Database Query Command Registrar
     * - This property registers a command to be performed by a query on the database
     */
    private string $action = "";

    /**
     * #### Database Query Operator Registrar
     * - This property stores all operators used to query a database 
     */
    private array $operators = [];



    /**
     * #### Set Connection Options
     * - This method registers database connection options to
     * the database connection registrar
     * @param array $options
     * @return void
     */
    protected function setOptions(array $options): void
    {
        $this->options = $options;
        return;
    }

    /**
     * #### Get Connection Options
     * -This method fetches registered database connection options
     * from the database connection registrar
     * @return array - Connection options
     */
    protected function getOptions()
    {
        return $this->options;
    }

    /**
     * #### Set Query Data
     * - This method registers sql query data to the Database
     * query data registrar
     * @param array $data
     * @return void
     */
    protected function setData(array $data)
    {
        $this->data = $data;
        return;
    }

    /**
     * #### Get Query Data
     * - This method retreives registered sql query data from 
     * database query data registrar
     * @return array - Query data
     */
    protected function getData()
    {
        return $this->data;
    }

    /**
     * #### Set Query Action
     * - This method registers an sql command to the
     * database query registrar. 
     * - Commands can be SELECT, UPDATE DELETE or any valid SQL command 
     * @param string $action - The sql command to be executed
     * @return void
     */
    protected function setAction(string $action)
    {
        $this->action = $action;
        return;
    }

    /**
     * #### Get Query Action
     * - This method gets a query action from the database query command registrar
     * @return string - The SQL command
     */
    protected function getAction()
    {
        return $this->action;
    }

    /**
     * #### Set Operators
     * - This method registers sql query operators to the database query operators registrar
     * @param array $operators - The SQl operators
     * @return void
     */
    protected function setOperators(array $operators)
    {
        $this->operators = $operators;
        return;
    }

    /**
     * #### Get Operators
     * - This method fetches query operators from database query operators registrar
     * @return array
     */
    protected function getOperators()
    {
        return $this->operators;
    }

    /**
     * #### Set Conn
     * - This method registers an instance of PDO driver to the Database connection registrar and allows us to connect to a database
     * @param PDO $conn
     * @return void
     */
    protected function setConn(PDO $conn)
    {
        $this->conn = $conn;
        return;
    }

    /**
     * #### Get Conn
     * - This method gets a live connection to the database registered in the database connection registrar
     * @return PDO|null  
     */
    protected function getConn()
    {
        return $this->conn;
    }

    /**
     * #### Get Message
     * - This method gets sql error messages and displays them
     * @param string $message - The connection error message 
     * @return void
     */
    protected function getMessage(string $message)
    {
        echo $message;
        return;
    }


    /**
     * #### Set Database Name
     * - This method registers the name of the database that we are querying to the databases name registrar
     * - The database name can be defined manually or configured in the `.env` file
     * @param string $dbname - The database to query 
     * @return void
     */
    protected function setName(string $dbname = "")
    {
        $this->dbname = isset($dbname) ? $dbname : Env::get("MYSQL_DBNAME");
        return;
    }

    /**
     * #### Get Database Name
     * - This method gets the name of the database that we are querying from the database name registrar
     * @return string - The query database name
     */
    protected function getName()
    {
        return $this->dbname;
    }

    /**
     * #### Set Password
     * - This method registers a host dsn connection password to the database password registrar
     * - The connection password is defined in the `.env` file under the field `MYSQL_PASSWORD`
     * @return void
     */
    protected function setPassword()
    {
        $this->password = (Env::get("MYSQL_PASSWORD") === "null") ? "" : Env::get("MYSQL_PASSWORD");
        return;
    }

    /**
     * #### Get Password
     * - This method gets a registered host dsn connection password from the database password registrar
     * @return string - The registered database host connection password
     */
    protected function getPassword()
    {
        return $this->password;
    }

    /**
     * #### Set SQL
     * - This method registers an sql query to the database sql query registrar
     * @param string $sql - The sql query to execute
     * @return void
     */
    protected function setSQL(string $sql)
    {
        $this->sql = $sql;
        return;
    }

    /**
     * #### Get SQL
     * - This method gets a registered sql query from the database sql query registrar
     * @return string - The sql statement
     */
    protected function getSQL()
    {
        return $this->sql;
    }

    /**
     * #### Set Params
     * - This method registers sql parameters that are to be bound in an sql statement, to the database params registrar
     * @return void 
     */
    protected function setParams(array $params)
    {
        $this->params = $params;
        return;
    }

    /**
     * #### Get Params
     * - This method gets registered sql parameters from the database params registrar
     * @return array - The registered params
     */
    protected function getParams()
    {
        return $this->params;
    }

    /**
     * #### Set Fetch Mode
     * - This method registers a fetch flag integer to the database fetch registrar
     * @param int $fetch - The fetch flag identifier
     * @return void
     */
    protected function setFetch(int $fetch)
    {
        $this->fetch = $fetch;
        return;
    }

    /**
     * #### Get Fetch Mode
     * - This method gets a registered fetch flag identifier from the database fetch registrar
     * @return int - The fetch flag identifier
     */
    protected function getFetch()
    {
        return $this->fetch;
    }

    /**
     * #### Set Statement
     * - This method registers a prepared PDO statement to the database statement registrar
     * @param PDOStatement - The prepared PDO statement 
     */
    protected function setStmt(PDOStatement $stmt)
    {
        $this->stmt = $stmt;
        return;
    }

    /**
     * #### Get Statement
     * - This method gets a registered prepared PDO statement from the PDO statement registrar
     * @return PDOStatement - The prepared PDO statemant
     */
    protected function getStmt()
    {
        return $this->stmt;
    }


    /**
     * #### Set Columns
     * - This method registers the database columns to query in the database columns registrar
     * @param array $columns - The database columns to be registered
     * @return void
     */
    protected function setColumns(array $columns)
    {
        $this->columns = $columns;
        return;
    }

    /**
     * #### Get Columns
     * - This method gets registered database columns to be queried from the database columns registrar
     * @return array - The columns to be queried in an SQL statement
     */
    protected function getColumns()
    {
        return $this->columns;
    }


    /**
     * #### Set Table
     * - This method registers the table to be queried in the database table registrar
     * @param string $table - The database table to be queried
     * @return void
     */
    protected function setTable(string $table)
    {
        $this->table = $table;
        return;
    }

    /**
     * #### Get Table
     * - This method gets a registered table to be queried from the database table registrar
     * @return string - The database table to be queried 
     */
    protected function getTable()
    {
        return $this->table;
    }

    /**
     * #### Set Where
     * - This method registers the where clause of an sql query to the database where clause registrar
     * @param array $where - The where clause as an array
     * @return void
     */
    protected function setWhere(array $where)
    {
        $this->where = $where;
        return;
    }

    /**
     * #### Get Where
     * - This method gets the registered where clause from the database where clause registrar
     * @return array - The where clause as an array
     */
    protected function getWhere()
    {
        return $this->where;
    }


    /**
     * #### Set Output
     * - This method registers the output display of database results to the database results registrar
     * @param object|array|bool $results - The fetched database results
     * @return void
     */
    protected function setOutput(object|array|bool $results)
    {
        $this->results = $results;
        return;
    }

    /**
     * #### Get Output
     * - This method gets results from the database results registrar
     * @return object|array - The database fetched results
     */
    protected function getOutput()
    {
        return $this->results;
    }

    /**
     * #### Set Count
     * - This method registers the database results row count to the database row count registrar
     * @param int $count - The database results row count
     * @return void 
     */
    protected function setCount(int $count)
    {
        $this->count = $count;
        return;
    }

    /**
     * #### Get Count
     * - This method gets a registered database result row count from the database row count registrar
     * @return int - The database result row count 
     */
    protected function getCount()
    {
        return $this->count;
    }


}